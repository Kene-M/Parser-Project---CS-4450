# Generated from MiniPyCode.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,42,282,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,
        1,4,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,1,10,
        1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,
        1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,
        1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,
        1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,25,
        1,26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,30,
        1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,34,1,34,1,34,
        1,34,1,34,1,34,1,34,3,34,193,8,34,1,35,3,35,196,8,35,1,35,4,35,199,
        8,35,11,35,12,35,200,1,36,3,36,204,8,36,1,36,4,36,207,8,36,11,36,
        12,36,208,1,36,1,36,4,36,213,8,36,11,36,12,36,214,1,37,1,37,5,37,
        219,8,37,10,37,12,37,222,9,37,1,38,1,38,5,38,226,8,38,10,38,12,38,
        229,9,38,1,38,1,38,1,38,5,38,234,8,38,10,38,12,38,237,9,38,1,38,
        3,38,240,8,38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,
        1,39,1,39,3,39,254,8,39,3,39,256,8,39,1,39,1,39,1,40,4,40,261,8,
        40,11,40,12,40,262,1,40,1,40,1,41,1,41,1,41,3,41,270,8,41,1,41,1,
        41,3,41,274,8,41,1,41,3,41,277,8,41,3,41,279,8,41,1,41,1,41,0,0,
        42,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,
        13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,
        24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,
        35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,1,0,6,1,0,48,57,3,0,
        65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,4,0,10,10,13,13,
        34,34,92,92,4,0,10,10,13,13,39,39,92,92,2,0,9,9,32,32,298,0,1,1,
        0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,
        0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,
        0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,
        0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,
        0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,
        0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,
        0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,
        0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,
        0,0,83,1,0,0,0,1,85,1,0,0,0,3,87,1,0,0,0,5,89,1,0,0,0,7,91,1,0,0,
        0,9,93,1,0,0,0,11,95,1,0,0,0,13,97,1,0,0,0,15,100,1,0,0,0,17,103,
        1,0,0,0,19,106,1,0,0,0,21,109,1,0,0,0,23,112,1,0,0,0,25,115,1,0,
        0,0,27,117,1,0,0,0,29,122,1,0,0,0,31,127,1,0,0,0,33,133,1,0,0,0,
        35,137,1,0,0,0,37,140,1,0,0,0,39,144,1,0,0,0,41,147,1,0,0,0,43,151,
        1,0,0,0,45,153,1,0,0,0,47,155,1,0,0,0,49,157,1,0,0,0,51,159,1,0,
        0,0,53,162,1,0,0,0,55,165,1,0,0,0,57,168,1,0,0,0,59,171,1,0,0,0,
        61,174,1,0,0,0,63,177,1,0,0,0,65,179,1,0,0,0,67,181,1,0,0,0,69,192,
        1,0,0,0,71,195,1,0,0,0,73,203,1,0,0,0,75,216,1,0,0,0,77,239,1,0,
        0,0,79,241,1,0,0,0,81,260,1,0,0,0,83,278,1,0,0,0,85,86,5,42,0,0,
        86,2,1,0,0,0,87,88,5,47,0,0,88,4,1,0,0,0,89,90,5,37,0,0,90,6,1,0,
        0,0,91,92,5,43,0,0,92,8,1,0,0,0,93,94,5,45,0,0,94,10,1,0,0,0,95,
        96,5,61,0,0,96,12,1,0,0,0,97,98,5,43,0,0,98,99,5,61,0,0,99,14,1,
        0,0,0,100,101,5,45,0,0,101,102,5,61,0,0,102,16,1,0,0,0,103,104,5,
        42,0,0,104,105,5,61,0,0,105,18,1,0,0,0,106,107,5,47,0,0,107,108,
        5,61,0,0,108,20,1,0,0,0,109,110,5,37,0,0,110,111,5,61,0,0,111,22,
        1,0,0,0,112,113,5,105,0,0,113,114,5,102,0,0,114,24,1,0,0,0,115,116,
        5,58,0,0,116,26,1,0,0,0,117,118,5,101,0,0,118,119,5,108,0,0,119,
        120,5,105,0,0,120,121,5,102,0,0,121,28,1,0,0,0,122,123,5,101,0,0,
        123,124,5,108,0,0,124,125,5,115,0,0,125,126,5,101,0,0,126,30,1,0,
        0,0,127,128,5,119,0,0,128,129,5,104,0,0,129,130,5,105,0,0,130,131,
        5,108,0,0,131,132,5,101,0,0,132,32,1,0,0,0,133,134,5,102,0,0,134,
        135,5,111,0,0,135,136,5,114,0,0,136,34,1,0,0,0,137,138,5,105,0,0,
        138,139,5,110,0,0,139,36,1,0,0,0,140,141,5,97,0,0,141,142,5,110,
        0,0,142,143,5,100,0,0,143,38,1,0,0,0,144,145,5,111,0,0,145,146,5,
        114,0,0,146,40,1,0,0,0,147,148,5,110,0,0,148,149,5,111,0,0,149,150,
        5,116,0,0,150,42,1,0,0,0,151,152,5,40,0,0,152,44,1,0,0,0,153,154,
        5,41,0,0,154,46,1,0,0,0,155,156,5,60,0,0,156,48,1,0,0,0,157,158,
        5,62,0,0,158,50,1,0,0,0,159,160,5,61,0,0,160,161,5,61,0,0,161,52,
        1,0,0,0,162,163,5,62,0,0,163,164,5,61,0,0,164,54,1,0,0,0,165,166,
        5,60,0,0,166,167,5,61,0,0,167,56,1,0,0,0,168,169,5,60,0,0,169,170,
        5,62,0,0,170,58,1,0,0,0,171,172,5,33,0,0,172,173,5,61,0,0,173,60,
        1,0,0,0,174,175,5,105,0,0,175,176,5,115,0,0,176,62,1,0,0,0,177,178,
        5,91,0,0,178,64,1,0,0,0,179,180,5,44,0,0,180,66,1,0,0,0,181,182,
        5,93,0,0,182,68,1,0,0,0,183,184,5,84,0,0,184,185,5,114,0,0,185,186,
        5,117,0,0,186,193,5,101,0,0,187,188,5,70,0,0,188,189,5,97,0,0,189,
        190,5,108,0,0,190,191,5,115,0,0,191,193,5,101,0,0,192,183,1,0,0,
        0,192,187,1,0,0,0,193,70,1,0,0,0,194,196,5,45,0,0,195,194,1,0,0,
        0,195,196,1,0,0,0,196,198,1,0,0,0,197,199,7,0,0,0,198,197,1,0,0,
        0,199,200,1,0,0,0,200,198,1,0,0,0,200,201,1,0,0,0,201,72,1,0,0,0,
        202,204,5,45,0,0,203,202,1,0,0,0,203,204,1,0,0,0,204,206,1,0,0,0,
        205,207,7,0,0,0,206,205,1,0,0,0,207,208,1,0,0,0,208,206,1,0,0,0,
        208,209,1,0,0,0,209,210,1,0,0,0,210,212,5,46,0,0,211,213,7,0,0,0,
        212,211,1,0,0,0,213,214,1,0,0,0,214,212,1,0,0,0,214,215,1,0,0,0,
        215,74,1,0,0,0,216,220,7,1,0,0,217,219,7,2,0,0,218,217,1,0,0,0,219,
        222,1,0,0,0,220,218,1,0,0,0,220,221,1,0,0,0,221,76,1,0,0,0,222,220,
        1,0,0,0,223,227,5,34,0,0,224,226,8,3,0,0,225,224,1,0,0,0,226,229,
        1,0,0,0,227,225,1,0,0,0,227,228,1,0,0,0,228,230,1,0,0,0,229,227,
        1,0,0,0,230,240,5,34,0,0,231,235,5,39,0,0,232,234,8,4,0,0,233,232,
        1,0,0,0,234,237,1,0,0,0,235,233,1,0,0,0,235,236,1,0,0,0,236,238,
        1,0,0,0,237,235,1,0,0,0,238,240,5,39,0,0,239,223,1,0,0,0,239,231,
        1,0,0,0,240,78,1,0,0,0,241,242,5,114,0,0,242,243,5,97,0,0,243,244,
        5,110,0,0,244,245,5,103,0,0,245,246,5,101,0,0,246,247,5,40,0,0,247,
        248,1,0,0,0,248,255,3,71,35,0,249,250,5,44,0,0,250,253,3,71,35,0,
        251,252,5,44,0,0,252,254,3,71,35,0,253,251,1,0,0,0,253,254,1,0,0,
        0,254,256,1,0,0,0,255,249,1,0,0,0,255,256,1,0,0,0,256,257,1,0,0,
        0,257,258,5,41,0,0,258,80,1,0,0,0,259,261,7,5,0,0,260,259,1,0,0,
        0,261,262,1,0,0,0,262,260,1,0,0,0,262,263,1,0,0,0,263,264,1,0,0,
        0,264,265,6,40,0,0,265,82,1,0,0,0,266,267,4,41,0,0,267,279,3,81,
        40,0,268,270,5,13,0,0,269,268,1,0,0,0,269,270,1,0,0,0,270,271,1,
        0,0,0,271,274,5,10,0,0,272,274,2,12,13,0,273,269,1,0,0,0,273,272,
        1,0,0,0,274,276,1,0,0,0,275,277,3,81,40,0,276,275,1,0,0,0,276,277,
        1,0,0,0,277,279,1,0,0,0,278,266,1,0,0,0,278,273,1,0,0,0,279,280,
        1,0,0,0,280,281,6,41,1,0,281,84,1,0,0,0,18,0,192,195,200,203,208,
        214,220,227,235,239,253,255,262,269,273,276,278,2,6,0,0,1,41,0
    ]

class MiniPyCodeLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    BOOL = 35
    INT = 36
    DOUBLE = 37
    VARNAME = 38
    STRING = 39
    RANGE = 40
    WS = 41
    NEWLINE = 42

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'*'", "'/'", "'%'", "'+'", "'-'", "'='", "'+='", "'-='", "'*='", 
            "'/='", "'%='", "'if'", "':'", "'elif'", "'else'", "'while'", 
            "'for'", "'in'", "'and'", "'or'", "'not'", "'('", "')'", "'<'", 
            "'>'", "'=='", "'>='", "'<='", "'<>'", "'!='", "'is'", "'['", 
            "','", "']'" ]

    symbolicNames = [ "<INVALID>",
            "BOOL", "INT", "DOUBLE", "VARNAME", "STRING", "RANGE", "WS", 
            "NEWLINE" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "BOOL", "INT", "DOUBLE", "VARNAME", 
                  "STRING", "RANGE", "WS", "NEWLINE" ]

    grammarFileName = "MiniPyCode.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[41] = self.NEWLINE_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def NEWLINE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            self.onNewLine()
     

    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates is None:
            preds = dict()
            preds[41] = self.NEWLINE_sempred
            self._predicates = preds
        pred = self._predicates.get(ruleIndex, None)
        if pred is not None:
            return pred(localctx, predIndex)
        else:
            raise Exception("No registered predicate for:" + str(ruleIndex))

    def NEWLINE_sempred(self, localctx:RuleContext, predIndex:int):
            if predIndex == 0:
                return self.atStartOfInput()
         


